pipeline 
{
    agent any

    tools {
        nodejs 'node22'
        jdk 'jdk21'
        go 'go1.24.3'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'prod'], description: 'Choice enviroNment that you want.')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS REGION FOR ECR')
        string(name: 'REPO_DOCKER_USER', defaultValue: 'ribun', description: 'user Docker Hub')
        string(name: 'TAG', defaultValue: 'v1.0', description: 'Tag docker images ex(image:TAG)')
        // choice(name: 'SERVICES', choices: ['auth', 'user', 'task'], description: 'Choice service')

        string(name: 'CLUSTER_NAME', defaultValue: 'muzique-cluster', description: 'Name ECS cluster')
        // string(name: 'SERVICE_NAME', defaultValue: 'web-front-end-muzique-123', description: 'Name service on ECS')
        // string(name: 'TASK_DEF_NAME', defaultValue: 'task-definition-web-muzique', description: 'Name task definition ECS')
    }
    environment {
        AWS_REGION  = "${params.AWS_REGION}"
        SNYK_TOKEN  = credentials('snyk')
        REPO_NAME   = "${params.REPO_DOCKER_USER}/muzique-${params.SERVICES}-service:${params.TAG}"
        REPO_IMAGE  = "muzique-${params.SERVICES}-service"

        CLUSTER_NAME  = "${params.CLUSTER_NAME}"
    
        MYSQL_ROOT_PASSWORD = credentials('MYSQL_ROOT_PASSWORD')
        MYSQL_DATABASE      = "muziquedevops"
        MYSQL_USER          = "muzique"
        MYSQL_PASSWORD      = credentials('MYSQL_PASSWORD')
        MYSQL_HOST          = credentials('MYSQL_HOST')
        MYSQL_PORT          = "3306"
        SECRET_KEY          = credentials('SECRET_KEY')
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'deploy', url: 'https://github.com/minhphuc2544/Muzique-Backend.git'
            }
        }
        stage('Check services') {
            script {
                def changedFiles = sh(script: "git diff --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT", returnStdout: true).trim().split("\n")

                def detectServices = ""
                if (changedFiles.any { it.startsWith("user-service/auth/")}) {
                    detectServices = "auth"
                } else if (changedFiles.any { it.startsWith("user-service/user/")}) {
                    detectServices = "user"
                } else if (changedFiles.any { it.startsWith("task-service/task")}) {
                    detectServices = "task"
                }

                if ( detectServices == "") {
                    error("Cannot find services need to update!")
                }
                env.SERVICES = detectServices
            }
        }
        stage('Setup ENV') {
            script {
                def serviceNameMap = [
                    'auth' : 'auth-service-muzique',
                    'user' : 'user-service-muzique',
                    'task' : 'task-service-muzique'
                ]
                def taskDefMap = [
                    'auth' : 'task-definition-auth-muzique',
                    'user' : 'task-definition-user-muzique',
                    'task' : 'task-definition-task-muzique'
                ]
                def serviceMap = [
                        'auth' : 'user-service/auth', 
                        'user' : 'user-service/user',
                        'task' :  'task-service'
                ]
                def portMap = [
                        'auth' : 8000,
                        'user' : 8000,
                        'task' : 8000
                ]
                env.SERVICE_NAME = serviceNameMap[env.SERVICES]
                env.TASK_DEF_NAME = taskDefMap[env.SERVICES]
                env.DIR_NAME = serviceMap[env.SERVICES]
                env.PORT = portMap[env.SERVICES]
            }
        }
        // stage('Analys code - SonarQube') {
        //     environment {
        //         SCANNER_HOME = tool 'sonar-scanner'
        //     }
        //     steps {
        //         withSonarQubeEnv('sonar-server') {
        //         sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Muzique_Frontend \
        //             -Dsonar.projectKey=Muzique-fe
        //         '''
        //         }
        //     }
        // }
        // stage('QUALITY GATE') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
        //         }
        //     }
        // }
        // stage('Snyk Test - App (npm)') {
        //     steps {
        //         dir(env.DIR_NAME) {
        //             sh '''
        //                 snyk auth $SNYK_TOKEN
        //                 snyk test --all-project --severity-threshold=medium --json > ./reports/snyk-report.json || true
        //             '''
        //         }
        //     }
        // }
        // stage('Snyk Monitor') {
        //     steps {
        //         dir(env.DIR_NAME) {
        //             sh 'snyk monitor --all-project'
        //         }
        //     }
        // }
        // stage('OWASP FS SCAN') {
        //     steps {
        //         dir(env.DIR_NAME) {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }
        // stage('Trivy FS scan') {
        //     steps {
        //         dir(env.DIR_NAME) {
        //             sh "trivy fs . > trivyfs.json || true"
        //         }
        //     }
        // }
        stage('Docker Build'){
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker', url: 'https://index.docker.io/v1/']) {
                        dir(env.DIR_NAME) {
                            sh '''
                                docker build -t $REPO_IMAGE .
                                docker tag $REPO_IMAGE $REPO_NAME
                                docker push $REPO_NAME
                            '''
                        }
                       
                    }
                }
            }
        }
        // stage('Trivy scan image') {
        //     steps {
        //         sh '''
        //             trivy image $REPO_IMAGE > trivy.json
        //         '''
        //     }
        // }
        // stage('Snyk scan image') {
        //     steps {
        //         sh '''
        //             snyk container test $REPO_NAME
        //             snyk container monitor $REPO_NAME
        //         '''
        //     }
        // }
        stage('Remove container') {
            steps {
                script {
                    dir(env.DIR_NAME)
                    {
                        sh '''
                            docker stop $REPO_IMAGE | true
                            docker rm $REPO_IMAGE | true
                        '''
                    }
                }
            }
        }
        stage('Run container') {
            steps {
                script {
                    dir(env.DIR_NAME)
                    {
                        sh """
                            echo "Run contaienr test in jenkins: "
                            docker run -d --name $REPO_IMAGE  -p ${env.PORT}:8080 "$REPO_NAME"
                        """
                    }
                }
            }
        }
        stage('Deploy to DEV') {
            when {
                expression { params.ENVIRONMENT == 'dev' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']]) {
                    sh """
                        echo "Deploying to development: "
                        aws ecs describe-task-definition \
                        --task-definition ${env.TASK_DEF_NAME} \
                        --query 'taskDefinition' > task-def.json

                        # Tạo biến môi trường mới
                        NEW_ENVS=\"
                        [
                            {\\\"name\\\": \\\"MYSQL_ROOT_PASSWORD\\\", \\\"value\\\": \\\"$MYSQL_ROOT_PASSWORD\\\"},
                            {\\\"name\\\": \\\"MYSQL_DATABASE\\\", \\\"value\\\": \\\"$MYSQL_DATABASE\\\"},
                            {\\\"name\\\": \\\"MYSQL_USER\\\", \\\"value\\\": \\\"$MYSQL_USER\\\"},
                            {\\\"name\\\": \\\"MYSQL_PASSWORD\\\", \\\"value\\\": \\\"$MYSQL_PASSWORD\\\"},
                            {\\\"name\\\": \\\"MYSQL_HOST\\\", \\\"value\\\": \\\"$MYSQL_HOST\\\"},
                            {\\\"name\\\": \\\"MYSQL_PORT\\\", \\\"value\\\": \\\"$MYSQL_PORT\\\"},
                            {\\\"name\\\": \\\"SECRET_KEY\\\", \\\"value\\\": \\\"$SECRET_KEY\\\"}
                        ]
                        \"

                        # Tạo file JSON mới bằng jq
                        cat task-def.json | jq \
                            --arg IMAGE "$REPO_NAME" \
                            --arg NAME "$REPO_IMAGE" \
                            --argjson NEW_ENVS "$NEW_ENVS" \
                        '
                        .containerDefinitions |= map(
                            if .name == $NAME then
                            .image = $IMAGE
                            | .environment |= (
                                reduce $NEW_ENVS[] as $new_var (
                                    map(if .name == $new_var.name then .value = $new_var.value else . end);
                                    if any(.name == $new_var.name; true) then . else . + [$new_var] end
                                )
                                )
                            else .
                            end
                        )
                        | {
                            family,
                            containerDefinitions,
                            executionRoleArn,
                            taskRoleArn,
                            networkMode,
                            requiresCompatibilities,
                            cpu,
                            memory
                        }
                        ' > new-task-def.json

                        # Đăng ký revision mới
                        aws ecs register-task-definition --cli-input-json file://new-task-def.json > register-task.json
                        
                        # Update ECS service
                        NEW_REVISION=$(jq -r '.taskDefinition.revision' register-task.json)
                        aws ecs update-service --cluster $CLUSTER_NAME --service ${env.SERVICE_NAME} --task-definition ${env.TASK_DEF_NAME}:$NEW_REVISION
                        
                        echo "Done"
                    """
                }
            }
        }
        stage('Deploy to PROD') {
            when {
                expression {params.ENVIRONMENT == 'prod'}
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']]) {
                    sh '''
                        echo "Deploying to production: "
                    '''
                }
            }
        }
    }
}